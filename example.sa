// Print hello world five times
5 times {
    main print "Hello World!"
}

5.times(() {
    main.print("Hello World!")
})

// Sum the first 1000 integers
main print [1..1000] reduce add

// `main` is the main object of the program
// print is a function in main to print to stdout
// [1..1000] initializes a list of the 1000 fisrt integers
// reduce is a method on a list object. It takes a function with two parameters as it's parameter, where the first parameter is the result of the preceding iteration of the provided function
// List<T>.reduce (*, T) {}
// add is a method: Number.add(Number)

// Squares

main.print
    [1..100] map (n) { n pow 2 }

// Paranthesis are otional when there is only one parameter

// InfiniteList of fibonacci numbers
[0, 1] next i { self get(i - 2) add self get i - 1 }

[0, 1].next((i) {
    self.get(i - 2).add(self.get(i - 1))
})


// Primes

def Number divisible(Number){Boolean} = (n) {
    self mod n eq 0
}

def Number prime {Boolean} = {
    [2..self]
        .find self divisible
        .eq None
}

main print [1..100]
    .filter is_prime

// Strict primes

def Number.divisible(Number){Boolean} = (n) {
    self.mod(n).eq(0)
}

def Number.prime(){Boolean} = () {
    [2..self]
        .find(self.divisible)
        .eq(None)
}

main.print(
    [1..100].filter(is_prime)
)
